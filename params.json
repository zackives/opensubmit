{
  "name": "OpenSubmit",
  "tagline": "Web submission system for course assignment solutions. Supports semi-automated code evaluation.",
  "body": "The OpenSubmit project\r\n======================\r\n\r\nThis is OpenSubmit, a small web application for managing student\r\nassignment solutions in a university environment.\r\n\r\nOther tools, such as Moodle, are more powerful and support not only\r\nassignments, but also the management of learning material, course\r\nprogress and access rights. If you want the all-inclusive solution, this\r\nis the wrong project.\r\n\r\nOpenSubmit offers a trivial web page were *students can login and submit\r\ntheir assignment solutions*. Teachers and their personal use the backend\r\ninterface to manage assignments, deadlines, and the gradings. Students\r\nare informed about the progress of their correction and their final\r\ngrade via eMail and the frontend page.\r\n\r\nThe unique capability of OpenSubmit is the *support for coding\r\nassignments*, were students upload their programming exercise solution\r\nas source code archive. OpenSubmit offers an executor daemon that runs \r\non another machine and downloads submitted solutions from the\r\nweb server. These archives are unpacked and compiled, so\r\nthat non-compiling assignment solutions are rejected by the system\r\nbefore the deadline. You can also run an assignment-specific validation\r\nscript that figures out if the student code behaves nicely, before accepting\r\nit as solution. This makes the life of the corrector less\r\nmiserable, because after the deadline, all gradable solutions are\r\n‘valid’. Students also seem to like the idea of having a\r\nvalidated solution, so that they do not fail due to technical\r\ndifficulties at the correctors side.\r\n\r\nWhen the deadline is over, the system can run another invisible test with the\r\nstudent code the determine grading-relevant information.\r\n\r\nSince OpenSubmit is only for assignment submission, it has no elaborated management\r\nof course participants. Everybody who can perform a successful login can\r\nsubmit solutions. Therefore, we expect you to have an institute-specific \r\nauthentication provider. OpenSubmit currently supports OpenID and Shibboleth\r\nout of the box for such cases. You can also offer GitHub, Twitter or Google login\r\nfor determining the student identity. A third option is to integrate OpenSubmit\r\nvia LTI in an existing learning management system (LMS).\r\n\r\nThe preliminary [end-user documentation](https://github.com/troeger/opensubmit/wiki/User-Manual) is available in the Wiki.\r\n\r\nInstallation\r\n------------\r\n\r\nIf you just want to install your own copy of OpenSubmit, please read the [installation guide](https://github.com/troeger/opensubmit/wiki/Installation-Instructions) in the Wiki.\r\n\r\nLicense\r\n-------\r\n\r\nOpenSubmit is licensed under the AGPL Version 3. This means you are\r\nallowed to:\r\n\r\n-  Install and run the unmodified OpenSubmit code at your site.\r\n-  Re-package and distribute the unmodified version of OpenSubmit from\r\n   this repository.\r\n-  Modify and re-publish (fork) the sources, as long as your modified\r\n   versions are accessible for everybody.\r\n\r\nIn short, AGPL forbids you to distribute / run your own modified version\r\nof OpenSubmit without publishing your code.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}